С использованием Selenium Webdriver, применяя паттерн проектирования Page Object
и сохраняя веб-локаторы в отдельном yaml-файле выполнить следующие тесты в
браузере Google Chrome для линукс:
 Инструменты, которые обязательно нужно использовать для обязательного
задания: Python, PyTest, Selenium WebDriver, yaml

Оставить 
Логин на сайт https://test-stand.gb.ru введения правильного логин и пароля.
Клик по ссылке About
Проверка что на странице присутствует надпись About Page (//*[@id="app"]/main/div/div/h1)
Проверка, что шрифт в заголовке открывшегося окна имеет размер 32 px 

Перепиши код используя новые данные а не нужные убери


#log.txt


#BaseApp.py

from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import logging


class BasePage:
    def __init__(self, driver) -> None:
        self.driver = driver
        self.base_url = "https://test-stand.gb.ru"

    def find_element(self, locator, time=10):
        try:
            element = WebDriverWait(self.driver, time).until(EC.presence_of_element_located(locator),
                                                             message=f"Can't find element by locator {locator}")
        except:
            logging.exception("Find element exception")
            element = None
        return element

    def get_element_property(self, locator, property):
        element = self.find_element(locator)
        if element:
            return element.value_of_css_property(property)
        else:
            logging.error(f"Property {property} not founnd in element with locator {locator}")
            return None

    def go_to_site(self):
        try:
            start_browsing = self.driver.get(self.base_url)
        except:
            logging.exception("Exception while open site")
            start_browsing = None
        return start_browsing

    def get_alert_text(self):
        try:
            alert = self.driver.switch_to.alert
            return alert.text
        except:
            logging.exception("Exception with alert")
            return None


#conftest.py

import yaml
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.firefox import GeckoDriverManager

with open("testdata.yaml", encoding='utf-8') as f:
    testdata = yaml.safe_load(f)
    browser = testdata["browser"]


@pytest.fixture(scope="session")
def browsser():
    if browser == "firefox":
        service = Service(executable_path=GeckoDriverManager().install())
        options = webdriver.FirefoxOptions()
        driver = webdriver.Firefox(service=service, options=options)
    else:
        service = Service(executable_path=ChromeDriverManager().install())
        options = webdriver.ChromeOptions()
        driver = webdriver.Chrome(service=service, options=options)
    yield driver
    driver.quit()


#locators.yaml

xpath:
    LOCATOR_LOGIN_FIELD: //*[@id="login"]/div[1]/label/input
    LOCATOR_PASS_FIELD: //*[@id="login"]/div[2]/label/input
    LOCATOR_ERROR_FIELD: //*[@id="app"]/main/div/div/div[2]/h2
    LOCATOR_HELLO: //*[@id="app"]/main/nav/ul/li[3]/a
    LOCATOR_NEW_POST_BTN: //*[@id="create-btn"]
    LOCATOR_TITLE: //*[@id="create-item"]/div/div/div[1]/div/label/input
    LOCATOR_DESCRIPTION: //*[@id="create-item"]/div/div/div[2]/div/label/span/textarea
    LOCATOR_CONTENT: //*[@id="create-item"]/div/div/div[3]/div/label/span/textarea
    LOCATOR_SAVE_BTN: //*[@id="create-item"]/div/div/div[7]/div/button
    LOCATOR_RES_LBL: //*[@id="app"]/main/div/div[1]/h1
    LOCATOR_CONTACT_BTN: //*[@id="app"]/main/nav/ul/li[2]/a
    LOCATOR_CONTACT_NAME: //*[@id="contact"]/div[1]/label/input
    LOCATOR_CONTACT_MAIL: //*[@id = "contact"]/div[2]/label/input
    LOCATOR_CONTACT_CONTENT: //*[@id = "contact"]/div[3]/label/span/textarea
    LOCATOR_CONTACT_SEND: //*[@id="contact"]/div[4]/button/span
css:
    LOCATOR_LOGIN_BTN: button


#pytest.ini

[pytest]
log_file_format = %(asctime)s %(levelname)s %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S
log_file = log.txt
log_file_level = 20


#test_01.py

from testpage import OperationHelper
import pytest
import logging
import yaml
import time


with open("testdata.yaml", encoding='utf-8') as f:
    testdata = yaml.safe_load(f)



def test_step1(browsser):
    logging.info("Test 1 Starting")
    testpage = OperationHelper(browsser)
    testpage.go_to_site()
    testpage.enter_login("test")
    testpage.enter_pass("test")
    testpage.click_login_button()
    assert testpage.get_error_text() == "401"


def test_step2(browsser):
    logging.info("Test 2 Starting")
    testpage = OperationHelper(browsser)
    testpage.go_to_site()
    testpage.enter_login(testdata.get("login"))
    testpage.enter_pass(testdata.get("password"))
    testpage.click_login_button()
    assert testpage.get_user_text() == f"Hello, {testdata.get('login')}"


def test_step3(browsser):
    logging.info("Test3 Stsrting")
    testpage = OperationHelper(browsser)
    testpage.click_new_post_btn()
    testpage.enter_title(testdata.get("title"))
    testpage.enter_description(testdata.get("description"))
    testpage.enter_content(testdata.get("content"))
    testpage.click_save_btn()
    time.sleep(3)
    assert testpage.get_res_text() == testdata.get("title"), "Test FAILED!"


def test_step4(browsser):
    # test contact us
    logging.info("Test Contact_us Starting")
    testpage = OperationHelper(browsser)
    testpage.click_contact_link()
    testpage.enter_contact_name(testdata.get("username"))
    testpage.enter_contact_email(testdata.get("user_email"))
    testpage.enter_contact_content(testdata.get("content_contact"))
    testpage.click_contact_send_btn()
    assert testpage.get_allert_message() == "Form successfully submitted", "Test FAILED!"


if __name__ == "__main__":
    pytest.main(["-vv"])

#testdata.yaml

address: https://test-stand.gb.ru
browser: chrome
sleep_time: 5

login: "Testovich13"
password: "41502dcd87"
title_hello: "Hello, Testovich13"

title: "NEW POST"
description: "SELENIUM HERE!"
content: "THIS IS CONTENT BY SELENIUM!"

username: Testov
user_email: ezhov@isd.su
content_contact: "Hello World!"



#testpage.py

from BaseApp import BasePage
from selenium.webdriver.common.by import By
import yaml
import logging
import time


class TestSearchLocators:
    ids = dict()
    with open("./locators.yaml", encoding="utf-8") as f:
        locators = yaml.safe_load(f)

    for locator in locators["xpath"].keys():
        ids[locator] = (By.XPATH, locators["xpath"][locator])
    for locator in locators["css"].keys():
        ids[locator] = (By.CSS_SELECTOR, locators["css"][locator])


class OperationHelper(BasePage):

    def enter_text_into_field(self, locator, word, description=None):
        if description:
            element_name = description
        else:
            element_name = locator
        logging.info(f"Send {word} to element {element_name}")
        field = self.find_element(locator)
        if not field:
            logging.error(f"Element {locator} not found")
            return False
        try:
            field.clear()
            field.send_keys(word)
        except:
            logging.exception(f"Exception while opertion with {locator}")
            return False
        return True

    def click_button(self, locator, description=None):
        if description:
            element_name = description
        else:
            element_name = locator
        button = self.find_element(locator)
        if not button:
            return False
        try:
            button.click()
        except:
            logging.exception("Exception with click")
            return False
        logging.debug(f"Clicked {element_name} button")
        return True

    def get_text_from_element(self, locator, description=None):
        if description:
            element_name = description
        else:
            element_name = locator
        field = self.find_element(locator, time=3)
        if not field:
            return None
        try:
            text = field.text
        except:
            logging.exception(f"Exception while get test from {element_name}")
            return None
        logging.debug(f"We find text {text} in field {element_name}")
        return text

    # ENTER TEXT
    def enter_login(self, word):
        self.enter_text_into_field(TestSearchLocators.ids["LOCATOR_LOGIN_FIELD"], word, description="login form")

    def enter_pass(self, word):
        self.enter_text_into_field(TestSearchLocators.ids["LOCATOR_PASS_FIELD"], word, description="pasword form")

    def enter_title(self, word):
        self.enter_text_into_field(TestSearchLocators.ids["LOCATOR_TITLE"], word, description="title form")

    def enter_description(self, word):
        self.enter_text_into_field(TestSearchLocators.ids["LOCATOR_DESCRIPTION"], word, description="description form")

    def enter_content(self, word):
        self.enter_text_into_field(TestSearchLocators.ids["LOCATOR_CONTENT"], word, description="content form")

    def enter_contact_name(self, word):
        self.enter_text_into_field(TestSearchLocators.ids["LOCATOR_CONTACT_NAME"], word, description="contact name form")

    def enter_contact_email(self, word):
        self.enter_text_into_field(TestSearchLocators.ids["LOCATOR_CONTACT_MAIL"], word,
                                   description="contact email form")

    def enter_contact_content(self, word):
        self.enter_text_into_field(TestSearchLocators.ids["LOCATOR_CONTACT_CONTENT"], word,
                                   description="contact content form")

    # CLICK
    def click_login_button(self):
        self.click_button(TestSearchLocators.ids["LOCATOR_LOGIN_BTN"], description="login")

    def click_new_post_btn(self):
        self.click_button(TestSearchLocators.ids["LOCATOR_NEW_POST_BTN"], description="new post")

    def click_save_btn(self):
        self.click_button(TestSearchLocators.ids["LOCATOR_SAVE_BTN"], description="save")

    def click_contact_link(self):
        self.click_button(TestSearchLocators.ids["LOCATOR_CONTACT_BTN"], description="contact")

    def click_contact_send_btn(self):
        self.click_button(TestSearchLocators.ids["LOCATOR_CONTACT_SEND"], description="contact us")

    # GET TEXT
    def get_error_text(self):
        return self.get_text_from_element(TestSearchLocators.ids["LOCATOR_ERROR_FIELD"], description="error")

    def get_user_text(self):
        return self.get_text_from_element(TestSearchLocators.ids["LOCATOR_HELLO"], description="user")

    def get_res_text(self):
        return self.get_text_from_element(TestSearchLocators.ids["LOCATOR_RES_LBL"], description="result")

    def get_alert_txt(self):
        alert = self.driver.switch_to.alert
        message = alert.text
        alert.accept()
        return message

    def get_allert_message(self):
        time.sleep(1)
        logging.info("Get alert message")
        txt = self.get_alert_txt()
        logging.info(f"Alert message is {txt}")
        return txt